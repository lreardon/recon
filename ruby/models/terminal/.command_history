exit
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
$e.explore
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.evaluate_nullary("R(R(R(^(#),1,#),^(1),#),1,^(^(1)))")
$e.evaluate_nullary("R(R(R(^(#),1,#),^(1),#),1,^(^(1)))")
$e.evaluate_nullary("R(R(R(^(#),#,1),#,1),1,1)")
$.evaluate_nullary("R(R(R(^(#),#,1),1,#),^(^(^(1))),1)")
$e.evaluate_nullary("R(R(R(^(#),#,1),1,#),^(^(^(1))),1)")
exit
$e.explore
$e.new_unaries
$e.unaries
"R(^(#),1,*)".sub('*', "R(^(#),^(^(^(1))),1)")
exit
$e.explore
exit
exit
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
exit
restart
exit
$e.explore
exut
exit
$e.explore
exit
$e.explore
exit
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
exit
$e.explore
exit
$e.explore
$e.explore
exit
$e.explore
exit
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
exit
exit
exit
exit
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
exit
$v = Evaluator.new
exit
require models/evaluator
require_relative models/evaluator
exit
$v = Evaluator.new
$v = Evaluator.new
exit
exit
exit
exit
exit
$e.evaluator
exit
$e.evaluator
				puts `#{ENV.fetch('PROJECT_ROOT', nil)}/rust/evaluations/target/release/load_evaluations_fst`
				puts `#{ENV.fetch('PROJECT_ROOT', nil)}/rust/evaluations/target/release/load_evaluations_fst`
				puts `#{ENV.fetch('PROJECT_ROOT', nil)}/rust/evaluations/target/release/load_evaluations_fst`
exit
$e.evaluator
exit
exit
$e.explore
$e.explore
$e.explore
$e.explore
require 'benchmark'

n = 100_000
Benchmark.bm do |x|
  x.report { n.times { puts "test" } }
end
require 'benchmark'

n = 100_000
Benchmark.bm do |x|
  x.report { n.times { puts "test" } }
end
exit
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
exit
exit
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
exit
$e.explore
exit
exit
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
exit
$e.explore
v = $e.evaluator
v
v.mem_evals
v.mem_evals.key?("R(R(R(R(^(#),#,1),#,^(1)),#,^(1)),R(^(#),^(1),R(^(#),1,^(1))),R(R(R(^(#),#,1),^(1),#),R(^(#),1,^(1)),^(^(1))))")
recursive_depth("R(R(R(R(^(#),#,1),#,^(1)),#,^(1)),R(^(#),^(1),R(^(#),1,^(1))),R(R(R(^(#),#,1),^(1),#),R(^(#),1,^(1)),^(^(1))))")
recursive_depth("R(R(R(R(^(#),#,1),#,^(1)),#,^(1)),R(^(#),^(1),R(^(#),1,^(1))),R(R(R(^(#),#,1),^(1),#),R(^(#),1,^(1)),^(^(1))))")
v.recursive_depth("R(R(R(R(^(#),#,1),#,^(1)),#,^(1)),R(^(#),^(1),R(^(#),1,^(1))),R(R(R(^(#),#,1),^(1),#),R(^(#),1,^(1)),^(^(1))))")
arguments = "R(R(R(R(^(#),#,1),#,^(1)),#,^(1)),R(^(#),^(1),R(^(#),1,^(1))),R(R(R(^(#),#,1),^(1),#),R(^(#),1,^(1)),^(^(1))))".split_into_top_level_arguments
arguments = "R(R(R(R(^(#),#,1),#,^(1)),#,^(1)),R(^(#),^(1),R(^(#),1,^(1))),R(R(R(^(#),#,1),^(1),#),R(^(#),1,^(1)),^(^(1))))".split_into_top_level_arguments
require "#{ENV.fetch('PROJECT_ROOT')}/ruby/extensions/string"
arguments = "R(R(R(R(^(#),#,1),#,^(1)),#,^(1)),R(^(#),^(1),R(^(#),1,^(1))),R(R(R(^(#),#,1),^(1),#),R(^(#),1,^(1)),^(^(1))))".split_into_top_level_arguments
def split_into_top_level_arguments
		arguments = []
		current_argument = 0

		depth = 0
		each_char do |char|
			arguments.append('') until arguments.length > current_argument
			if depth.zero? && char == ','
				current_argument += 1
				next
			end
			arguments[current_argument] += char
			depth += 1 if char == '('
			depth -= 1 if char == ')'
		end

		arguments
	end
"R(R(R(R(^(#),#,1),#,^(1)),#,^(1)),R(^(#),^(1),R(^(#),1,^(1))),R(R(R(^(#),#,1),^(1),#),R(^(#),1,^(1)),^(^(1))))".split_into_top_level_arguments
"R(R(R(R(^(#),#,1),#,^(1)),#,^(1)),R(^(#),^(1),R(^(#),1,^(1))),R(R(R(^(#),#,1),^(1),#),R(^(#),1,^(1)),^(^(1))))".split_into_top_level_arguments
"R(^(#),1,^(1))".split_into_top_level_arguments
"R(^(#),1,^(1))".split_into_top_level_arguments
def split_into_top_level_arguments
		arguments = []
		current_argument = 0

		depth = 0
		each_char do |char|
			arguments.append('') until arguments.length > current_argument
			if depth.zero? && char == ','
				current_argument += 1
				next
			end
			arguments[current_argument] += char
			depth += 1 if char == '('
			depth -= 1 if char == ')'
		end

		arguments
	end
"asdf,asdf,asdf".split_into_top_level_arguments
"R(R(R(R(^(#),#,1),#,^(1)),#,^(1)),R(^(#),^(1),R(^(#),1,^(1))),R(R(R(^(#),#,1),^(1),#),R(^(#),1,^(1)),^(^(1))))"[2..-2].split_into_top_level_arguments
exit
$e.explore
$e.explore
exit
$e.explore
exit
$e.explore
$e.explore
exit
$e.explore
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
exit
$e.explore
exit
$e.explore
restart
exit
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
exit
$e.explore
$e.explore
$e.explore
exit
exit
$e.explore
$e.explore
$e.explore
$e.explore
exit
exit
$e.explore
$e.explore
$e.explore
$e.explore
exit
exit
$e.explore
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
$e.explore
$e.explore
$e.explore
$e.explore
eit
eit
exit
eit
$e.explore
exit
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explor
restart
explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
$e.explore
exit
$e.explore
$e.explore
$e.explore
$e.explore
$e.explore
$e.evaluator.evaluate_nullary("R(R(R(R(^(#),#,1),^(1),#),^(^(1)),#),R(R(^(#),1,#),^(^(1)),R(R(^(#),#,1),1,R(^(#),1,^(1)))),R(R(^(#),#,1),^(^(1)),1))")
$e.evaluator.evaluate_nullary("R(R(R(R(^(#),1,#),#,^(1)),#,R(^(#),^(1),1)),R(^(#),^(1),^(1)),R(R(^(#),1,#),^(^(1)),R(R(^(#),#,1),1,R(^(#),1,^(1)))))")
$e.evaluate_nullary("R(R(R(R(^(#),#,1),#,1),1,#),R(R(^(#),1,#),^(^(1)),R(R(^(#),#,1),1,R(^(#),1,^(1)))),R(R(^(#),1,#),^(^(1)),1))")
$e.evaluator.evaluate_nullary("R(R(R(R(^(#),#,1),#,1),1,#),R(R(^(#),1,#),^(^(1)),R(R(^(#),#,1),1,R(^(#),1,^(1)))),R(R(^(#),1,#),^(^(1)),1))")
exit
$e.evaluate("R(R(R(R(^(#),#,1),#,1),1,#),R(R(^(#),1,#),^(^(1)),R(R(^(#),#,1),1,R(^(#),1,^(1)))),R(R(^(#),1,#),^(^(1)),1))")
$e.evaluate("R(R(R(R(^(#),1,#),#,^(1)),#,R(^(#),1,^(1))),R(R(^(#),1,#),^(^(1)),R(R(^(#),#,1),1,R(^(#),1,^(1)))),R(R(^(#),#,1),R(^(#),^(1),1),^(1)))")
exit
$e.print_x_to_100(45)
[0..10]
exit
$e.print_x_to_100(45)
45 % 10
$e.print_x_to_100(45)
$e.print_x_to_100(45)
exit
$e.print_x_to_100(45)
exit
$e.print_x_to_100(45)
$e.print_x_to_100(45)
exit
$e.print_x_to_100(45)
(0..10).to_a
exit
$e.print_x_to_100(45)
exit
$e.print_x_to_99(45)
exit
$e.print_x_to_99(45)
exit